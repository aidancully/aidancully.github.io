var searchIndex = {};
searchIndex['containerof'] = {"items":[[0,"","containerof","Intrusive structure support in Rust.",null,null],[3,"IntrusiveAlias","","Alias that has the same representation as an intrusive translation\ntype. The idea is to be able to use this alias for intrusive\nfacility implementations, by defining the \"true\" implementation of\nthe facility to use the single (but type-unsafe) IntrusiveAlias\ntype, while allowing type-safe wrapper implementations to delegate\ntheir behavior to the implementation function.",null,null],[3,"OwnBox","","Represent ownership of an object via ownership of an intrusive\nfield within the object. Differs from Rust-standard `Box<T>` in\nthat dropping an `OwnBox<T>` instance is a bug.",null,null],[3,"BorrowBox","","A borrow-pointer that does not require explicit ownership of the\nvalue being borrowed. Used to allow construction of the Intrusive\nstructure translation type from a borrow pointer.",null,null],[3,"BorrowBoxMut","","A mutable borrow-pointer that does not require explicit ownership\nof the value being borrowed. Used to allow construction of the\nIntrusive structure translation type from a mutable borrow\npointer.",null,null],[8,"IntrusiveBase","","Minimal trait that, when implemented for a type, allows for the\nblanket implementation of the Intrusive trait for that type. This\nis the trait implemented by the `containerof_intrusive!` macro,\nand the only implementors of this trait should be the\ntranslation-types defined by the `containerof_intrusive!` macro.",null,null],[16,"Container","","Type of containing structure.",0,null],[16,"Field","","Type of intrusive field within containing structure.",0,null],[10,"offset","","Returns offset of intrusive field within containing structure.",0,{"inputs":[{"name":"intrusivebase"}],"output":{"name":"usize"}}],[10,"new","","Ownership-moving translation from generic intrusive pointer\nalias to type-safe intrusive pointer.",0,{"inputs":[{"name":"intrusivebase"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"as_alias","","Allow using type-safe intrusive pointer as generic intrusive pointer.",0,{"inputs":[{"name":"intrusivebase"}],"output":{"name":"intrusivealias"}}],[8,"Intrusive","","Trait defining routines for translation between containing\nstructure and intrusive field. The only implementors of this trait\nshould be the translation-types defined by the\n`containerof_intrusive!` macro.",null,null],[10,"from_alias","","Ownership-moving translation from generic intrusive pointer\nalias to type-safe intrusive pointer.",1,{"inputs":[{"name":"intrusive"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"into_alias","","Ownership-moving translation from type-safe intrusive pointer\nto generic intrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"intrusivealias"}}],[10,"as_alias_mut","","Allow using type-safe intrusive pointer as mutable generic\nintrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"intrusivealias"}}],[10,"of_alias","","Allow using generic intrusive pointer as type-safe intrusive\npointer.",1,{"inputs":[{"name":"intrusive"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"of_alias_mut","","Allow using generic intrusive pointer as mutable type-safe\nintrusive pointer.",1,{"inputs":[{"name":"intrusive"},{"name":"intrusivealias"}],"output":{"name":"self"}}],[10,"from_container","","Represent ownership of a container as ownership of an Intrusive\npointer type. (Inverse of `into_container`.)",1,{"inputs":[{"name":"intrusive"},{"name":"ownbox"}],"output":{"name":"self"}}],[10,"into_container","","Represent ownership of an Intrusive pointer type as ownership of\nits container. (Inverse of `from_container`.)",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"ownbox"}}],[10,"of_container","","Represent a borrow of an intrusive type via a borrow of its\ncontainer.",1,{"inputs":[{"name":"intrusive"},{"name":"container"}],"output":{"name":"borrowbox"}}],[10,"of_container_mut","","Represent a mutable borrow of an intrusive type via a mutable\nborrow of its container.",1,{"inputs":[{"name":"intrusive"},{"name":"container"}],"output":{"name":"borrowboxmut"}}],[10,"as_container","","Grant referential access to the container of this intrusive\npointer type.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"container"}}],[10,"as_container_mut","","Grant mutable referential access to the container of this\nintrusive pointer type.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"container"}}],[10,"from_field","","Assuming the \"field\" is a field in the container object, take\nownership of the field as an intrusive pointer, allowing\neventual translation back to the container. (Inverse of\n`into_field`.)",1,{"inputs":[{"name":"intrusive"},{"name":"ownbox"}],"output":{"name":"self"}}],[10,"into_field","","Represent ownership of the container object as ownership of\nthe intrusive field in the object. (Inverse of `from_field`.)",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"ownbox"}}],[10,"of_field","","Represent a borrow of an intrusive type via a borrow of the\nintrusive field.",1,{"inputs":[{"name":"intrusive"},{"name":"field"}],"output":{"name":"borrowbox"}}],[10,"of_field_mut","","Represent a mutable borrow of an intrusive type via a mutable\nborrow of the intrusive field.",1,{"inputs":[{"name":"intrusive"},{"name":"field"}],"output":{"name":"borrowboxmut"}}],[10,"as_field","","Grant referential access to the intrusive field represented by\nthis intrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"field"}}],[10,"as_field_mut","","Grant mutable referential access to the intrusive field represented by\nthis intrusive pointer.",1,{"inputs":[{"name":"intrusive"}],"output":{"name":"field"}}],[11,"fmt","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"intrusivealias"}],"output":{"name":"intrusivealias"}}],[11,"eq","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"intrusivealias"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"intrusivealias"},{"name":"intrusivealias"}],"output":{"name":"bool"}}],[11,"new","","Create an IntrusiveAlias instance from a pointer address.",2,{"inputs":[{"name":"intrusivealias"},{"name":"usize"}],"output":{"name":"intrusivealias"}}],[11,"new_of","","Create an IntrusiveAlias instance which points to a borrowed\npointer. Unsafe, because it deliberately creates an alias to a\nborrowed object.",2,{"inputs":[{"name":"intrusivealias"},{"name":"t"}],"output":{"name":"intrusivealias"}}],[11,"get_address","","Get back the pointer address from which the `IntrusiveAlias` was\nconstructed.",2,{"inputs":[{"name":"intrusivealias"}],"output":{"name":"usize"}}],[11,"get_address","","Get value pointer address.",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"usize"}}],[11,"from_alias","","Construct an OwnBox from an IntrusiveAlias pointer. Unsafe\nbecause this allows trivial construction of pointer aliases.",3,{"inputs":[{"name":"ownbox"},{"name":"intrusivealias"}],"output":{"name":"ownbox"}}],[11,"into_alias","","Move ownership of an OwnBox into an IntrusiveAlias pointer.\nUnsafe because this allows trivial construction of pointer\naliases.",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"intrusivealias"}}],[11,"as_alias","","Return a borrow-pointer of an IntrusiveAlias with same address\nas the OwnBox. Unsafe because working with IntrusiveAlias\nstructures (that is, raw pointers) is unsafe.",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"intrusivealias"}}],[11,"from_box","","Construct an OwnBox from a Box.",3,{"inputs":[{"name":"ownbox"},{"name":"box"}],"output":{"name":"ownbox"}}],[11,"into_box","","Construct a Box from an OwnBox. Should only be called on an\nOwnBox that was constructed via from_box (or\nconvert::From<Box<_>>). Unsafe, because the OwnBox may not\nhave been constructed from a Box, and if it hasn't, then\ndropping the resulting Box will result in an attempt to free\nan invalid pointer.",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"ownbox"},{"name":"box"}],"output":{"name":"ownbox"}}],[6,"Target","","",null,null],[11,"deref","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"ownbox"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"ownbox"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"borrowbox"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build a BorrowBox from a borrow pointer.",4,{"inputs":[{"name":"borrowbox"},{"name":"t"}],"output":{"name":"borrowbox"}}],[11,"new_from","","Build a BorrowBox from a raw pointer and a lifetime. Unsafe,\nbecause this API cannot guarantee that the pointer value is of\nthe same type as the destination borrow box.",4,{"inputs":[{"name":"borrowbox"},{"name":"intrusivealias"},{"name":"u"}],"output":{"name":"borrowbox"}}],[6,"Target","","",null,null],[11,"deref","","",4,{"inputs":[{"name":"borrowbox"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"borrowboxmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Build a BorrowBoxMut from a borrow pointer.",5,{"inputs":[{"name":"borrowboxmut"},{"name":"t"}],"output":{"name":"borrowboxmut"}}],[11,"new_from","","Build a BorrowBoxMut from a raw pointer and a lifetime.\nUnsafe, because this API cannot guarantee that the pointer\nvalue is of the same type as the destination borrow box.",5,{"inputs":[{"name":"borrowboxmut"},{"name":"intrusivealias"},{"name":"u"}],"output":{"name":"borrowboxmut"}}],[6,"Target","","",null,null],[11,"deref","","",5,{"inputs":[{"name":"borrowboxmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"borrowboxmut"}],"output":{"name":"t"}}],[14,"containerof_field_offset!","","Implement C-like `offsetof` macro in Rust. Will become obsolete\nwhen-and-if offsetof() is implemented in the core language.",null,null],[14,"containerof_intrusive!","","Define a type representing the translation between an intrusive\nfield and its containing structure.",null,null]],"paths":[[8,"IntrusiveBase"],[8,"Intrusive"],[3,"IntrusiveAlias"],[3,"OwnBox"],[3,"BorrowBox"],[3,"BorrowBoxMut"]]};
initSearch(searchIndex);
