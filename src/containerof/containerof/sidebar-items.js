initSidebarItems({"macro":[["containerof_field_offset!","Implement C-like `offsetof` macro in Rust. Will become obsolete when-and-if offsetof() is implemented in the core language."],["containerof_intrusive!","Define a type representing the translation between an intrusive field and its containing structure."]],"struct":[["BorrowBox","A borrow-pointer that does not require explicit ownership of the value being borrowed. Used to allow construction of the Intrusive structure translation type from a borrow pointer."],["BorrowBoxMut","A mutable borrow-pointer that does not require explicit ownership of the value being borrowed. Used to allow construction of the Intrusive structure translation type from a mutable borrow pointer."],["IntrusiveAlias","Alias that has the same representation as an intrusive translation type. The idea is to be able to use this alias for intrusive facility implementations, by defining the \"true\" implementation of the facility to use the single (but type-unsafe) IntrusiveAlias type, while allowing type-safe wrapper implementations to delegate their behavior to the implementation function."],["OwnBox","Represent ownership of an object via ownership of an intrusive field within the object. Differs from Rust-standard `Box<T>` in that dropping an `OwnBox<T>` instance is a bug."]],"trait":[["Intrusive","Trait defining routines for translation between containing structure and intrusive field. The only implementors of this trait should be the translation-types defined by the `containerof_intrusive!` macro."],["IntrusiveBase","Minimal trait that, when implemented for a type, allows for the blanket implementation of the Intrusive trait for that type. This is the trait implemented by the `containerof_intrusive!` macro, and the only implementors of this trait should be the translation-types defined by the `containerof_intrusive!` macro."]]});